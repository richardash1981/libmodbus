modbus_mapping_new(3)
=====================


NAME
----
modbus_mapping_new - allocate arrays of bits and registers for a ModBus
outstation.


SYNOPSIS
--------
*modbus_mapping_t* modbus_mapping_new(int 'nb_bits',
                                      int 'nb_input_bits',
                                      int 'nb_registers',
                                      int 'nb_input_registers',
                                      int 'nb_files', int 'nb_records', int 'record_size');*


DESCRIPTION
-----------
The *modbus_mapping_new()* function allocates arrays to store the current
values of an outstations' bits and registers. The pointers are stored in a
modbus_mapping_t structure.

The structure allocated is intended to act as a data store,
in which values are looked up each time a ModBus request is recieved by a
server/outstation.

Separate arrays are created for each type of data:

* bits,
* input bits,
* registers,
* input registers,
* file registers

All values of the arrays are initialized to zero.

This function is equivalent to a call of the
linkmb:modbus_mapping_new_start_address[3] function with all start addresses to
`0`.

* _nb_bits_ sets the number of binary outputs (Coils) in the structure.
* _nb_input_bits_ sets the number of binary (Discrete) inputs in the structure.
* _nb_registers_ sets the number of output / holding registers in the structure.
* _nb_input_registers_ sets the number of input registers in the structure.
* _nb_files_ sets the number of file registers in the structure.
* _nb_records_ sets how many records each file register has.
* _record_size_ sets the size of each record, in uint16_t words. This should
always be 1 however?

If it isn't necessary to allocate an array for a specific type of data, you can
pass the zero value in the relevant argument, no memory will be allocated and
the associated pointer will be NULL.

The resulting structure should be freed with a call to
linkmb::modbus_mapping_free[3].

RETURN VALUE
------------
The function shall return the new allocated structure if successful. Otherwise
it shall return NULL and set errno.


ERRORS
------
*ENOMEM*::
Not enough memory


EXAMPLE
-------
[source,c]
-------------------
/* The first value of each array is accessible from the 0 address. */
mb_mapping = modbus_mapping_new(BITS_ADDRESS + BITS_NB,
                                INPUT_BITS_ADDRESS + INPUT_BITS_NB,
                                REGISTERS_ADDRESS + REGISTERS_NB,
                                INPUT_REGISTERS_ADDRESS + INPUT_REGISTERS_NB);
if (mb_mapping == NULL) {
    fprintf(stderr, "Failed to allocate the mapping: %s\n",
            modbus_strerror(errno));
    modbus_free(ctx);
    return -1;
}
-------------------

SEE ALSO
--------
linkmb:modbus_mapping_free[3]
linkmb:modbus_mapping_new_start_address[3]


AUTHORS
-------
The libmodbus documentation was written by St√©phane Raimbault
<stephane.raimbault@gmail.com>
